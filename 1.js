document.write(decodeURIComponent(escape(atob('
<html lang="en">

<head>
    <title>ks任务</title>
    <meta charset="UTF-8">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Expires" content="0">
    <script src="https://gh.akass.cn/yint-tech/sekiro-samples/refs/heads/main/demo-web/sekiroWebMini.js"
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
        }
        h1 {
            font-size: 24px;
            margin: 20px 0;
            color: #333;
        }
        .button {
            display: inline-block;
            padding: 15px 30px;
            font-size: 18px;
            color: white;
            background-color: crimson;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            margin-top: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .button:hover {
            background-color: darkred;
        }
        @media (max-width: 768px) {
            body {
                font-size: 16px;
            }
            h1 {
                font-size: 20px;
                margin: 15px 0;
            }
            .button {
                font-size: 16px;
                padding: 12px 24px;
            }
        }
    </style>
</head>
<script>
    var clientId = document.cookie.match('userId=(\w+);')[1]

    function goToKs() {
        const iframe = document.getElementById('myIframe');
        iframe.src = 'kwai://tube/square'
    }

    function getD() {
        let currentDate = new Date();
        let year = currentDate.getFullYear();
        let month = String(currentDate.getMonth() + 1).padStart(2, '0');
        let day = String(currentDate.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    var allProcess = 0;
    window.onload = function () {
        let localP = localStorage.getItem(getD())
        if (localP) {
            allProcess = parseInt(allLocalP)
        }
        document.getElementById("process").innerHTML = clientId + " <br>" + getD() + ":当前任务进度:" + allProcess;
    }

    function update() {
        allProcess += 1;
        localStorage.setItem(getD(), allProcess)
        document.getElementById("process").innerHTML = clientId + " <br>" + getD() + ":当前任务进度:" + allProcess;
    }
</script>

<body>
<iframe id="myIframe" width="0" height="0"></iframe>
<img src="https://s2-111422.kwimgs.com/kos/nlav111422/pc-vision/img/new-logo.79c3bfe1.svg"  alt="logo"/>
<h1>提示: 做任务时，保持屏幕常量</h1>
<h1>提示: ks/ks极速版分别登录不同的账号可以做更多次任务</h1>
<h1>提示: 利用手机系统的分身能力，一台手机可以登多个号。</h1>
<h1>提示: 不要切换账号登录，要不然会降低账号质量，影响做任务的次数。</h1>
<h1>提示: 如果超过1分钟进度不走，可以过一个小时再试试。</h1>
<h1>账号质量差？试试边做任务边养号</h1>
<button class="button" onclick="goToKs()">养号</button>
<h1>您的账号是：<span id="span_uid"></span></h1>
<h1 id="process"></h1>
</body>

<script>
    window.gen_ids = (function () {
        const Ug = Number.MAX_SAFE_INTEGER || 9007199254740991;
        const n = "".concat(Date.now());
        const o = n.slice(n.length - 9);
        const p = "" + Math.floor(Math.random() * 800) + o + "0000";
        const MQ_Base = Number(p);
        let MQ_Index = 1;
        return function () {
            let a = MQ_Base + MQ_Index++;
            if (a + 1 >= Ug) MQ_Index = 1;
            let b = (function () {
                var e = new Date().getTime();
                "undefined" != typeof performance &&
                "function" == typeof performance.now &&
                (e += performance.now());
                return "xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx".replace(
                    /[xy]/g,
                    function (t) {
                        var r = (e + 16 * Math.random()) % 16 | 0;
                        return (
                            (e = Math.floor(e / 16)), ("x" === t ? r : (3 & r) | 8).toString(16)
                        );
                    }
                );
            })();
            return ["" + a, "" + b];
        };
    })();

    function Kwai_httpRequest(url, method, body, headers, resolve, reject) {
        let [a, b] = gen_ids();
        const cid = "yoda_kuaishou_plugin_callback_Kwai_httpRequest_" + b;
        window[cid] = function (data) {
            try {
                if (typeof data == "string") {
                    resolve(data);
                } else {
                    resolve(JSON.stringify(data));
                }
                delete window[cid];
            } catch (e) {
                reject(e.toString());
            }
        };
        if (!headers["User-Agent"] && !headers["user-agent"]) {
            headers["User-Agent"] = "kwai-android";
        }
        if (!headers["Content-Type"] && !headers["content-type"]) {
            headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        const args = {
            url: url,
            method: method.toUpperCase(),
            body: body,
            header: headers,
            callback: cid,
        };
        try {
            window.__yodaBridge__.invoke(
                "Kwai",
                "httpRequest",
                JSON.stringify(args),
                a
            );
        } catch (e) {
            reject(e.toString());
        }
    }

    function makeClient(clientId) {
        let group = "xxx-dd";
        var client = new SekiroClient(
            // "ws://112.5.37.172:5612/business/register?group=xxx-dd&clientId=x-" +
            "ws://212.192.13.244:5612/business/register?group=" + group + "&clientId=x-" + clientId
        );

        client.registerAction("getCookie", function (request, resolve, reject) {
            try {
                if (!request.ck_name) {
                    cookieStore
                        .getAll()
                        .then(function (i) {
                            resolve(JSON.stringify({cookies: i}));
                        })
                        .catch((e) => {
                            reject(e.toString());
                        });
                } else {
                    cookieStore
                        .get(request.ck_name)
                        .then(function (i) {
                            resolve(i);
                        })
                        .catch((e) => {
                            reject(e.toString());
                        });
                }
            } catch (e) {
                reject(e.toString());
            }
        });
        client.registerAction("getSidToken", function (request, resolve, reject) {
            const sid = request["sid"];
            if (sid === undefined || sid.length == 0) {
                reject("request.sid error => sid:" + sid);
                return;
            }
            let [a, b] = gen_ids();
            const cid = "yoda_kuaishou_plugin_callback_Kwai_getSidToken_" + b;
            window[cid] = function (data) {
                try {
                    if (typeof data == "string") {
                        resolve(data);
                    } else {
                        resolve(JSON.stringify(data));
                    }
                    delete window[cid];
                } catch (e) {
                    reject(e.toString());
                }
            };
            const args = {
                sid: sid,
                forceRefresh: true,
                callback: cid,
            };
            try {
                window.__yodaBridge__.invoke(
                    "Kwai",
                    "getSidToken",
                    JSON.stringify(args),
                    a
                );
            } catch (e) {
                reject(e.toString());
            }
        });
        client.registerAction("relationList", function (request, resolve, reject) {
            const rid = request["id"];
            if (rid === undefined || rid.length != 10) {
                reject("request.id error => id:" + rid);
                return;
            }
            const url = "https://az2-api-js.gifshow.com/rest/n/intimate/relation/list";
            const method = "POST";
            const body = "ownerId=" + rid;
            const headers = {};
            Kwai_httpRequest(url, method, body, headers, resolve, reject);
        });
        client.registerAction("requestData", function (request, resolve, reject) {
            try {
                let url = request["url"];
                const method = "POST";
                let body = request["body"];
                let type = request["type"];
                let headers = {};
                if (type === undefined) {
                    headers["Content-Type"] = "application/x-www-form-urlencoded";
                }
                Kwai_httpRequest(url, method, body, headers, resolve, reject);
            } catch (e) {
                reject(e.toString());
            }
        });
        window.client = client;
    }

    async function main() {
        // document.getElementById("jsVersion").innerText = "v0.0.4";
        // document.getElementById("jsVersion").style.fontSize = "30px";
        let uid;
        try {
            uid = (await cookieStore.get("userId")).value;
        } catch (e) {
        }
        var clientId;
        if (uid !== undefined && uid.length !== 0) {
            clientId = uid;
            makeClient(clientId);
            globalThis.uid = clientId;
        } else {
            clientId = "请刷新页面";
        }
        console.log("get uid: " + clientId);
        // document.getElementById("uid").innerText = clientId.toString();
        //document.getElementById("clientId").style.fontSize = "30px";
    }

    let kkkkkkkkk = setInterval(function () {
        if (window.SekiroClient) {
            clearInterval(kkkkkkkkk);
            ks_main();
        }
    }, 100);
</script>

</html>'))))
